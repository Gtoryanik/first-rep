//const {expect} = require('chai');
// import {logger} from '@wdio/logger';
// const exp = require("constants");
const { Browser } = require("puppeteer-core");
const { async } = require("rxjs");

describe ('it should check the result', ()=>{
    it ('selectors should be equal to the tasks data', async ()=>{
        browser.url('https://cloud.google.com/products/calculator#id=7f9a1f89-a1c0-4971-a9af-b8443d1e9402');
        await browser.pause(5000);
        await browser.switchToFrame(0);
        await browser.switchToFrame(0);

        const computeEngineResult = $('#compute > md-toolbar > h2');
        await computeEngineResult.waitForExist();
        await expect(computeEngineResult).toHaveTextContaining('Compute Engine');

        const numberOfInstancesResult = $('#compute > md-list:nth-child(2) > div > div.md-no-sticky.md-subheader > div > span');
        await numberOfInstancesResult.waitForExist();
        await expect(numberOfInstancesResult).toHaveText('4 x');
        //про Instances for не делаю проверку, т.к. их результат в одном классе находится

        const operatingSystem = $('#compute > md-list:nth-child(2) > md-list-item:nth-child(10) > div');
        await expect(operatingSystem).toHaveTextContaining('Free');
        const provisioningModelVMClass = $('#compute > md-list:nth-child(2) > md-list-item:nth-child(6)');
        await expect (provisioningModelVMClass).toHaveTextContaining('Regular')
        const instanceTypeResult = $('#compute > md-list:nth-child(2) > md-list-item:nth-child(8) > div.md-list-item-text.ng-binding.cpc-cart-multiline.flex')
        await expect(instanceTypeResult).toHaveTextContaining('n1-standard-8')
        const GSPuResult = $('#compute > md-list:nth-child(3) > md-list-item:nth-child(14) > div.md-list-item-text.ng-binding.cpc-cart-multiline.flex')
        await expect(GSPuResult).toHaveTextContaining('GPU dies: 1 NVIDIA TESLA P100')//исправить на указанное в заданиии, не кликается на сайте
        const localSSDResult = $('#compute > md-list:nth-child(3) > md-list-item:nth-child(16) > div.md-list-item-text.ng-binding.cpc-cart-multiline.flex')
        await expect(localSSDResult).toHaveTextContaining('Local SSD: 2x375 GiB');
        const datacenterLocationResult = $('#compute > md-list:nth-child(3) > md-list-item:nth-child(2)');
        await expect(datacenterLocationResult).toHaveTextContaining('Frankfurt');
        const commitedUsageResilt = $('#compute > md-list:nth-child(3) > md-list-item:nth-child(6) > div');
        await expect(commitedUsageResilt).toHaveTextContaining('1 Year')
        const sumResult = $('#resultBlock > md-card > md-card-content > div > div > div > h2 > b');
        await expect(sumResult).toHaveTextContaining('8,295.66')

    })
})

describe ('test', ()=>{
    it ('should work', async ()=>{
    browser.url('https://cloud.google.com/products/calculator?hl=en');
    await browser.switchToFrame(0);
    await browser.switchToFrame(0);

    const instances = await $('//input[@ng-model="listingCtrl.computeServer.quantity"]');
    await instances.waitForExist();
    await expect(instances).toBeClickable();
    await instances.click();
    await instances.addValue(4);

    const seriesList = await $('//md-select[@placeholder="Series"]/md-select-value/span/div')
    const seriesN1 = await $('#select_option_195');
    await browser.pause(5000);
    await seriesList.waitForExist();
    await seriesList.click();
    await seriesN1.waitForExist();
    await seriesN1.click();

    const machineTypeList =await $('//md-select[@placeholder="Instance type"]/md-select-value/span/div');
    const machineTypeN1S8 =await $('//md-option[@value="CP-COMPUTEENGINE-VMIMAGE-N1-STANDARD-8"]');
    // локатор работает через раз ^
    await machineTypeList.waitForExist();
    await machineTypeList.click();
    await machineTypeN1S8.waitForExist();
    await machineTypeN1S8.click();

    const addGPUs = await $('#mainForm > div:nth-child(3) > div > md-card > md-card-content > div > div:nth-child(1) > form > div:nth-child(14) > div.layout-column.flex-gt-sm-90.flex-80 > md-input-container > md-checkbox > div.md-label')
    await addGPUs.waitForExist();
    await addGPUs.click();

    const GPuTypeList = $('#select_456')
    const GPuTypeNeeded = $('#select_option_463');//работает через раз
    await GPuTypeList.waitForExist();
    await GPuTypeList.click();
    await GPuTypeNeeded.waitForExist();
    await GPuTypeNeeded.click();

    const GPuNumberList = $('#select_458');
    const GPuNumberNeeded = $('#select_option_467')
    await GPuNumberList.waitForExist();
    await GPuNumberList.click();
    await GPuNumberNeeded.waitForExist();
    await GPuNumberNeeded.click(); 

    const localSSDList = $('#select_value_label_412');
    const localSSDNeeded = await $('#select_option_439')//локатор работает через раз
    await localSSDList.waitForExist ();
    await localSSDList.click();
    await localSSDNeeded.waitForExist();
    await localSSDNeeded.click();

    const datacenterLocationList = $('#select_value_label_83');
    const datacenterLocationNeeded = $('#select_option_221');//локатор работает через раз
    await datacenterLocationList.waitForExist();
    await datacenterLocationList.click();
    await datacenterLocationNeeded.waitForExist();
    await datacenterLocationNeeded.click();

    const committedUsageList = $('#select_125');
    const committedUsageNeeded = $('#select_option_123')
    await committedUsageList.waitForExist();
    await committedUsageList.click();
    await committedUsageNeeded.waitForExist();
    await committedUsageNeeded.click();

    const addToEstimateButton =$('#mainForm > div:nth-child(3) > div > md-card > md-card-content > div > div:nth-child(1) > form > div.layout-align-end-start.layout-row > button')
    await addToEstimateButton.waitForExist();
    await addToEstimateButton.click();
    await browser.pause (5000);

});
})

get numberOfInstances() { return $('//input[@ng-model="listingCtrl.computeServer.quantity"]'); }
  get machineSeriesList() { return $('//md-select[@placeholder="Series"]/md-select-value/span/div'); }// работает
  get n1MachineSeries() { return $('n//md-optio[@value="n1"]/div[@class="md-text ng-binding"]'); }// не работает
  get machineTypeList() { return $('//md-select[@placeholder="Instance type"]/md-select-value/span/div'); }
  get n1s8MachineType() { return $('//md-option[@value="CP-COMPUTEENGINE-VMIMAGE-N1-STANDARD-8"]'); }
  get addGPUsButton() { return $('//md-checkbox[@aria-label="Add GPUs"]'); }
  get numberOfGPUsList() { return $('//md-select[@placeholder="Number of GPUs"]//div[@class="md-text ng-binding"][1]');}
  get neededNumberOfGPUs() { return $('//md-option[@ng-disabled="item.value != 0 && item.value < listingCtrl.minGPU"][2]');}
  get typeOfGPUsList() {return $('//md-input-container[@class="md-input-has-placeholder md-input-has-value flex"]');}
  get neededTypeOfGPU() {return $('//md-option[@value="NVIDIA_TESLA_V100"]');}
  get listOfSDDs() {return $('//md-select[@placeholder="Local SSD"]/md-select-value[@class="md-select-value"]/span/div[@class="md-text ng-binding"]');}
  get neededTypeOfSDD() {return $('//md-option[@ng-repeat="item in listingCtrl.dynamicSsd.computeServer"][@value="2"]');}
  get datacenterLocationList() {return $('//md-select[@placeholder="Datacenter location"]//md-select-value[@class="md-select-value"]');}
  get neededDatacenterLocation() {return $('//md-select-menu[@class="md-overflow"]//md-option[@value="europe-west3"]//div[@class="md-text ng-binding"]');}
  get commitedUsageList() {return $('//md-select[@placeholder="Committed usage"][@ng-disabled="listingCtrl.isCudDisabled"]//md-select-value[@class="md-select-value"]//span//div');}
  get commitedUsageTime() {return $('//div[@class="md-select-menu-container md-active md-clickable"]//md-select-menu//md-content//md-option[@ng-value="1"]//div[@class="md-text"]');}
  get addToEstimateBtn() {return $('//button[@class="md-raised md-primary cpc-button md-button md-ink-ripple"][@aria-label="Add to Estimate"][1]');}

describe('Hurt Me Plenty', () => {
    it('should work', async () => {
        browser.url('https://cloud.google.com/');
        const searchPrase = 'Google Cloud Pricing Calculator';
        const searchButton = $('body > section > devsite-header > div > div.devsite-top-logo-row-wrapper-wrapper > div > div > div.devsite-top-logo-row-middle > devsite-search > form');
        const searchInput = $('body > section > devsite-header > div > div.devsite-top-logo-row-wrapper-wrapper > div > div > div.devsite-top-logo-row-middle > devsite-search > form > div.devsite-search-container > div > input')
        await searchButton.click();
        await searchInput.addValue(searchPrase);
        await browser.keys("\uE007");

        await browser.pause(5000);

        const searchResult = await $('//div[@class="devsite-cse-results"]//div');
        await searchResult.waitForDisplayed();

        const calculatorPage = await $$(`.gs-title`)[0];
        await calculatorPage.waitForDisplayed();
        await calculatorPage.click();

        await browser.pause(5000);

        await browser.switchToFrame(0);
        await browser.switchToFrame(0);

        const instances = await $('//input[@ng-model="listingCtrl.computeServer.quantity"]');
        await instances.waitForExist();
        await expect(instances).toBeClickable();
        await instances.click();
        await instances.addValue(4);

        const seriesList = await $('//md-select[@placeholder="Series"]/md-select-value/span/div')
        const seriesN1 = await $('#select_option_195');
        
        await browser.pause(5000);
        await seriesList.waitForExist();
        await seriesList.click();
        await seriesN1.waitForExist();
        await seriesN1.click();
        await browser.pause(5000);

        const machineTypeList =await $('//md-select[@placeholder="Instance type"]/md-select-value/span/div');
        const machineTypeN1S8 =await $('//md-option[@value="CP-COMPUTEENGINE-VMIMAGE-N1-STANDARD-8"]');
        // локатор работает через раз ^
        await machineTypeList.waitForExist();
        await machineTypeList.click();
        await machineTypeN1S8.waitForExist();
        await machineTypeN1S8.click();

        const addGPUs = await $('#mainForm > div:nth-child(3) > div > md-card > md-card-content > div > div:nth-child(1) > form > div:nth-child(14) > div.layout-column.flex-gt-sm-90.flex-80 > md-input-container > md-checkbox > div.md-label')
        await addGPUs.waitForExist();
        await addGPUs.click();

        const GPuTypeList = $('#select_456')
        const GPuTypeNeeded = $('#select_option_463');//работает через раз
        await GPuTypeList.waitForExist();
        await GPuTypeList.click();
        await GPuTypeNeeded.waitForExist();
        await GPuTypeNeeded.click();

        const GPuNumberList = $('#select_458');
        const GPuNumberNeeded = $('#select_option_467')
        await GPuNumberList.waitForExist();
        await GPuNumberList.click();
        await GPuNumberNeeded.waitForExist();
        await GPuNumberNeeded.click(); 

        const localSSDList = $('#select_value_label_412');
        const localSSDNeeded = await $('#select_option_439')
        await localSSDList.waitForExist ();
        await localSSDList.click();
        await localSSDNeeded.waitForExist();
        await localSSDNeeded.click();

        const datacenterLocationList = $('#select_value_label_83');
        const datacenterLocationNeeded = $('#select_118');
        await datacenterLocationList.waitForExist();
        await datacenterLocationList.click();
        await datacenterLocationNeeded.waitForExist();
        await datacenterLocationNeeded.click();
        await browser.pause (5000);

        const committedUsageList = $('#select_125');
        const committedUsageNeeded = $('#select_option_123')
        await committedUsageList.waitForExist();
        await committedUsageList.click();
        await committedUsageNeeded.waitForExist();
        await committedUsageNeeded.click();
        await browser.pause (5000);

    });
})

